html,
body {
  height: 100%;
}

#root {
  display: flex;
  flex-direction: column;
  min-height: 100%;
}

body {
  background-color: #252529;
  color: #eee;
  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
    Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

.container {
  margin: 0 auto;
  padding: 0 15px;
  max-width: 100%;
}

@media (min-width: 992px) {
  .container {
    width: 960px;
  }
}

@media (min-width: 1200px) {
  .container {
    width: 1140px;
  }
}

.page-header {
  padding: 15px 0;
  border-bottom: 1px solid #444;
}

.page-main {
  padding: 25px 0 30px;
}

.page-footer {
  margin-top: auto;
  padding: 25px;
  border-top: 1px solid #444;
  text-align: center;
}

.text-link {
  color: currentColor;
  text-decoration: none;
  transition: color 0.2s ease-in;
}

.text-link:hover {
  color: blueviolet;
}

.text-link--footer {
  display: inline-flex;
  align-items: center;
  gap: 5px;
  vertical-align: bottom;
}

.stats {
  display: flex;
  justify-content: space-between;
  margin-bottom: 10px;
  font-size: 20px;
}

.cards-list {
  display: grid;
  /* somewhat (container with - gaps) / 6 */
  grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
  gap: 15px;
}

@media (min-width: 1200px) {
  .cards-list {
    grid-template-columns: repeat(auto-fit, minmax(170px, 1fr));
  }
}

.card {
  padding: 10px;
  border: 1px solid currentColor;
  border-radius: 5px;
  text-align: center;
  cursor: pointer;
  transition: border-color 0.2s ease-in;
}

.card:hover {
  border-color: #ff9800;
}

.card__image {
  display: block;
  margin: 0 auto;
  object-fit: cover;
  width: 150px;
  height: 100px;
}

.card figcaption {
  margin-bottom: 10px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.loading-text {
  text-align: center;
}

.loading-text svg {
  margin: 0 auto 5px;
  width: 32px;
  height: 32px;
  animation: spin 4s linear infinite;
}
